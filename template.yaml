apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-api-template
  title: Spring Boot REST API
  description: Cria um API REST usando Spring Boot Kotlin
  tags:
    - recommended
    - kotlin
    - rest
spec:
  owner: normandes.junior@zup.com.br
  type: service

  parameters:
    - title: Algum titulo simples
      required:
        - component_id
        - description
        - java_package_name
      properties:
        component_id:
          title: Nome
          type: string
          description: Nome unico do componente
          ui:field: EntityNamePicker
        java_package_name:
          title: Nome do pacote
          type: string
          description: Nome do pacote Java (org.example)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        values:
          component_id: ${{ parameters.component_id }}
          owner: ${{ parameters.owner }}
          java_package_name: ${{ parameters.java_package_name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./community
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # some outputs which are saved along with the job for use in the frontend
  output:
    remoteUrl: ${{ steps.publish.output.remoteUrl }}
    entityRef: ${{ steps.register.output.entityRef }}